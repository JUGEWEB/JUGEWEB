{"ast":null,"code":"import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nconst uploadFile = async file => {\n  try {\n    // Create a storage reference\n    const storageRef = ref(storage, `uploads/${file.name}`);\n\n    // Start the upload\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    // Wait for the upload to complete and get the download URL\n    uploadTask.on(\"state_changed\", snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log(\"Upload is \" + progress + \"% done\");\n    }, error => {\n      console.error(\"Upload failed:\", error);\n    }, async () => {\n      // Retrieve download URL\n      const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n      console.log(\"File available at\", downloadURL);\n      // Use this URL as needed, e.g., store it in a database or JSON\n    });\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n  }\n};","map":{"version":3,"names":["ref","uploadBytesResumable","getDownloadURL","uploadFile","file","storageRef","storage","name","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","console","log","error","downloadURL"],"sources":["C:/Users/User/Desktop/BNB SMART CONTRACT/malidagproduct/src/components/FileUpload.js"],"sourcesContent":["import { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\n\r\nconst uploadFile = async (file) => {\r\n  try {\r\n    // Create a storage reference\r\n    const storageRef = ref(storage, `uploads/${file.name}`);\r\n\r\n    // Start the upload\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    // Wait for the upload to complete and get the download URL\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        console.log(\"Upload is \" + progress + \"% done\");\r\n      },\r\n      (error) => {\r\n        console.error(\"Upload failed:\", error);\r\n      },\r\n      async () => {\r\n        // Retrieve download URL\r\n        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\r\n        console.log(\"File available at\", downloadURL);\r\n        // Use this URL as needed, e.g., store it in a database or JSON\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error uploading file:\", error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAE5E,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACjC,IAAI;IACF;IACA,MAAMC,UAAU,GAAGL,GAAG,CAACM,OAAO,EAAE,WAAWF,IAAI,CAACG,IAAI,EAAE,CAAC;;IAEvD;IACA,MAAMC,UAAU,GAAGP,oBAAoB,CAACI,UAAU,EAAED,IAAI,CAAC;;IAEzD;IACAI,UAAU,CAACC,EAAE,CACX,eAAe,EACdC,QAAQ,IAAK;MACZ,MAAMC,QAAQ,GAAID,QAAQ,CAACE,gBAAgB,GAAGF,QAAQ,CAACG,UAAU,GAAI,GAAG;MACxEC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGJ,QAAQ,GAAG,QAAQ,CAAC;IACjD,CAAC,EACAK,KAAK,IAAK;MACTF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,EACD,YAAY;MACV;MACA,MAAMC,WAAW,GAAG,MAAMf,cAAc,CAACM,UAAU,CAACE,QAAQ,CAACV,GAAG,CAAC;MACjEc,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,WAAW,CAAC;MAC7C;IACF,CACF,CAAC;EACH,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}